"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class LinkedListNode {
    constructor(value) {
        this.value = value;
        this.next = null;
        this.previous = null;
    }
}
exports.LinkedListNode = LinkedListNode;
class LinkedList {
    constructor() {
        this.head = null;
        this.tall = null;
        this.length = 0;
    }
    addValueToHead(value) {
        const newNode = new LinkedListNode(value);
        this.addToHead(newNode);
        return newNode;
    }
    addToHead(newNode) {
        newNode.next = this.head;
        if (this.head) {
            this.head.previous = newNode;
        }
        this.head = newNode;
        // if there is no next, that mean that the list was empty
        if (newNode.next == null) {
            this.tall = newNode;
        }
        this.length++;
        return this;
    }
    removeFromHead() {
        if (this.length === 0) {
            return null;
        }
        const node = this.head;
        this.head = node.next;
        node.next = null;
        // if head become null we need to remove tall too
        if (this.head === null) {
            this.tall = null;
        }
        this.length--;
        return node;
    }
    addValueToTall(value) {
        const newNode = new LinkedListNode(value);
        this.addToTall(newNode);
        return newNode;
    }
    addToTall(node) {
        // if the list is empty
        if (!this.tall) {
            return this.addToHead(node);
        }
        node.previous = this.tall;
        this.tall.next = node;
        this.tall = node;
        this.length++;
        return this;
    }
    removeFromTall() {
        if (this.length === 0) {
            return null;
        }
        const node = this.tall;
        this.tall = node.previous;
        node.previous = null;
        this.length--;
        // if head become null we need to remove tall too
        if (this.tall === null) {
            this.head = null;
        }
        return node;
    }
    findByValue(val, compere) {
        let node = this.head;
        while (node) {
            if ((!compere && node.value === val) ||
                (compere && compere(val, node.value))) {
                return node;
            }
            node = node.next;
        }
        return node;
    }
    remove(node) {
        if (!node) {
            return null;
        }
        if (this.head == node && this.tall == node) {
            this.head = null;
            this.tall = null;
            this.length = 0;
            return node;
        }
        else if (this.head == node) {
            return this.removeFromHead();
        }
        else if (this.tall == node) {
            return this.removeFromTall();
        }
        else {
            this.length--;
            node.previous.next = node.next;
            node.previous = null;
            node.next = null;
            return node;
        }
    }
    removeValue(val) {
        const node = this.findByValue(val);
        this.remove(node);
    }
}
exports.LinkedList = LinkedList;
//# sourceMappingURL=linked_list.js.map