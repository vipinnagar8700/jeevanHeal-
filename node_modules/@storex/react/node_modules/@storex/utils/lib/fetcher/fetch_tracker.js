"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// todo add option to config limit time for get cycle
// consider to throw error if wait_for(key) calling but no one defines waiter for this key
/**
 * FetchTracker help when you fetch some data asynchronically and in this time
 * you receive anther request for the same data. and you prefer to send the same
 * data for both requests instead of re-fetch
 *
 * @example
 * const tracker = FetchTracker();
 *
 * // before you go to fetch the data. check if the data currently fetched
 *
 * if (tracker.is_already_fetched("data_key")) {
 *      // the function return promise that will invoked by calling
 *      // tracker.start(key) and tracker.ended(key, value) or in case of failing tracker.failed(key, err)
 *      // see latter ...
 *      return tracker.wait_for("data_key")
 * }
 *
 *
 * // before you go to fetch the data
 * tracker.start("data_key");
 *
 * // if the fetcher success
 * tracker.ended("data_key", fetched_value);
 *
 * // if the fetcher failed
 * tracker.failed("data_key", some_err);
 *
 *
 *
 * @export
 * @class FetchTracker
 * @template T
 * @template unknown
 */
class FetchTracker {
    constructor({ timeout = 60000, wait_map } = {}) {
        this.__waiting = new Map();
        this.__on_ended_func = new Set();
        this.__timeout = timeout;
        this.__wait_map = wait_map;
    }
    __emit_ended_func(key, value) {
        for (const func of Array.from(this.__on_ended_func)) {
            func(key, value);
        }
    }
    onEnded(func) {
        if (typeof func == "function") {
            this.__on_ended_func.add(func);
        }
    }
    unlistenOnEnded(func) {
        this.__on_ended_func.delete(func);
    }
    //
    is_already_fetched(key) {
        return this.__waiting.has(key);
    }
    // the function return the value when it coming
    await_for(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.__waiting.get(key).push((value, err) => {
                    if (err) {
                        return reject(err);
                    }
                    resolve(value);
                });
            });
        });
    }
    // lifetime cycle for get action
    start(key) {
        this.__waiting.set(key, []);
    }
    ended(key, value) {
        const funcs = this.__waiting.get(key);
        // update waiters function
        if (funcs) {
            this.__waiting.delete(key);
            let mapped_value = typeof this.__wait_map == "function" ? this.__wait_map(value) : value;
            funcs.forEach(func => func(mapped_value));
        }
        this.__emit_ended_func(key, value);
    }
    failed(key, err) {
        const funcs = this.__waiting.get(key);
        if (funcs) {
            this.__waiting.delete(key);
            funcs.forEach(func => func(null, err));
        }
    }
}
exports.FetchTracker = FetchTracker;
//# sourceMappingURL=fetch_tracker.js.map