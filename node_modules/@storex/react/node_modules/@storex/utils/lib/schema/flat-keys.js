"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const get_prop_type_1 = require("./get-prop-type");
function flatKeys(schema) {
    return getRow(schema);
}
exports.flatKeys = flatKeys;
function flatObj(obj, prefix = "") {
    let result = {};
    for (const key in obj) {
        let val = obj[key];
        if (Array.isArray(val)) {
            continue;
        }
        let fullKey = (prefix ? `${prefix}.${key}` : key);
        if (isObj(val)) {
            result = Object.assign(Object.assign({}, result), flatObj(val, fullKey));
        }
        else {
            result[fullKey] = val;
        }
    }
    return result;
}
exports.flatObj = flatObj;
function isObj(obj) {
    return (typeof obj === "object") && (obj !== null);
}
function flatSchema({ schema, includeObject }) {
    return getRow(schema, "", "", includeObject);
}
exports.flatSchema = flatSchema;
function getRow(schema, key = "", path = "", includeObject = false) {
    const type = get_prop_type_1.getPropType(schema);
    const { title = key } = schema;
    if (type === "object") {
        // todo not using in the schema type first search for filter type
        let props = [];
        //to do array of object
        if (key && includeObject) {
            props.push({ schema, type, key, title, path });
        }
        for (const _key in schema.properties) {
            if (!schema.properties[_key]) {
                continue;
            }
            props = props.concat(getRow(schema.properties[_key], _key, path ? `${path}/${path}` : key, includeObject));
        }
        return props;
    }
    else {
        return [{ schema, type, key, title, path }];
    }
}
//# sourceMappingURL=flat-keys.js.map