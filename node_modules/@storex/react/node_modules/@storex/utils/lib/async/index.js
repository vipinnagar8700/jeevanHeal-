"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var queued_calling_1 = require("./queued-calling");
exports.queuedCalling = queued_calling_1.queuedCalling;
exports.getQueuedCallingStatus = queued_calling_1.getQueuedCallingStatus;
const delay_state_1 = require("./delay-state");
const SUFFIX_STATUS_KEY = `__delay_status__`;
function delay(opt) {
    return function (target, propertyKey, descriptor) {
        function getStatus(theThisFunction) {
            // todo: change to weak map
            let arg = descriptor
                ? `${propertyKey}${SUFFIX_STATUS_KEY}`
                : SUFFIX_STATUS_KEY;
            if (!theThisFunction[arg]) {
                theThisFunction[arg] = new delay_state_1.DelayState(target, opt, theThisFunction);
            }
            return theThisFunction[arg];
        }
        function wrapper() {
            let s = getStatus(this || wrapper);
            if (opt.reduceArgs) {
                // first lets reduce aggregate the arguments
                s.state.argsState = opt.reduceArgs(s.state.argsState, ...arguments);
            }
            // if already waiting
            if (s.state.waiting) {
                s.state.delayCallingAmount++;
                return;
            }
            s.state.callingAmount++;
            if (s.state.callingAmount > opt.startDelayAfter) {
                s.state.waiting = true;
                s.delay();
            }
            else {
                s.invoke();
            }
        }
        // if class
        if (descriptor) {
            target = descriptor.value;
            descriptor.value = wrapper;
            return descriptor;
        }
        else {
            return wrapper;
        }
    };
}
exports.delay = delay;
function sleep(time = 0) {
    return new Promise(res => {
        setTimeout(() => {
            res();
        }, time);
    });
}
exports.sleep = sleep;
//# sourceMappingURL=index.js.map