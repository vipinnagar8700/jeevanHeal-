import { Dispatcher, DispatcherRegisterOptions } from "./";
export interface SubscriberDispatcherRegisterOptions extends DispatcherRegisterOptions {
    name: string;
    onDispatch?: {
        pre?: Function;
        post?: Function;
    };
}
export declare type SubscriberTransform = (dispatchers: Dispatcher[] | {
    [key: string]: Dispatcher;
}, { context, oldData }: {
    context: any;
    oldData: any;
}) => any;
export declare type DispatcherOptions = (Dispatcher | SubscriberDispatcherRegisterOptions)[] | {
    [key: string]: Dispatcher;
} | {
    [key: string]: SubscriberDispatcherRegisterOptions;
};
export interface SubscriberArgs {
    to: DispatcherOptions;
}
export interface SubscriberMeta {
}
export interface SubscriberStatus {
}
/**
 *
 *
 * @export
 * @class Subscriber
 */
export declare class Subscriber extends Dispatcher {
    _is_need_to_update: boolean;
    _sources: any;
    _unregisterFunc: any[];
    _data: any;
    _is_updating: boolean;
    context: any;
    static _functions_to_updates: any[];
    constructor({ to }: SubscriberArgs);
    subscribe(dispatcher: any): void;
    getPostAndPreArgs(): {
        context: any;
    };
    _preAndPostUpdate: (options: SubscriberDispatcherRegisterOptions) => (eventsData: any, events: any) => void;
    _update: () => void;
    destroy(): void;
}
export declare function Sreatesubscriber(args: SubscriberArgs): Subscriber;
