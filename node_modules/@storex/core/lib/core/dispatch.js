"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function dispatch(eventNames) {
    return baseDispatch(eventNames);
}
exports.dispatch = dispatch;
function dispatchIf(conditionFunc, eventNames) {
    return baseDispatch(eventNames, conditionFunc);
}
exports.dispatchIf = dispatchIf;
function baseDispatch(eventNames, conditionFunc) {
    return (store, name, descriptor) => {
        if (descriptor) {
            return functionDispatchHandler(store, name, descriptor, eventNames, conditionFunc);
        }
        else {
            let events = [name];
            if (eventNames instanceof Array) {
                events.concat(eventNames);
            }
            return propDispatchHandler(store, name, events, conditionFunc);
        }
    };
}
function propDispatchHandler(store, propName, eventNames, conditionFunc) {
    if (!eventNames) {
        eventNames = [propName];
    }
    else if (!(eventNames instanceof Array)) {
        eventNames = [eventNames];
    }
    return {
        set(value) {
            if (this["_" + propName] === value) {
                return; // not update when there is no change
            }
            this["_" + propName] = value;
            if (typeof conditionFunc == "function" && !conditionFunc()) {
                // todo: maybe remove
            }
            else {
                store.dispatch.apply(this, [eventNames]);
            }
        },
        get() {
            return this["_" + propName];
        }
    };
}
function functionDispatchHandler(store, actionName, descriptor, eventNames, conditionFunc) {
    let key = "value";
    if (!descriptor.value) {
        if (descriptor.set) {
            key = "set";
        }
        else if (descriptor.get) {
            key = "get";
        }
    }
    let original = descriptor[key];
    if (original) {
        descriptor[key] = function () {
            // console.log(`Arguments: ${arguments}`);
            try {
                this._dispatch_count++;
                const result = original.apply(this, arguments);
                // console.log(`Result: ${result}`);
                return result;
            }
            catch (e) {
                console.error(`Error: ${e}`);
                throw e;
            }
            finally {
                this._dispatch_count--;
                if (typeof conditionFunc == "function" && !conditionFunc()) {
                    // todo: maybe remove
                }
                else {
                    store.dispatch.apply(this, [eventNames]);
                }
            }
        };
    }
    return descriptor;
}
//# sourceMappingURL=dispatch.js.map