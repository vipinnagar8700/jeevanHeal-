"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
/**
 *
 *
 * @export
 * @class Subscriber
 */
class Subscriber extends _1.Dispatcher {
    constructor({ to }) {
        super(); // todo
        this._is_need_to_update = true;
        this._unregisterFunc = [];
        this._is_updating = false;
        this.context = {};
        this._preAndPostUpdate = (options) => (eventsData, events) => {
            if (this._is_updating) {
                return; // todo
            }
            try {
                const { pre, post } = options.onDispatch;
                // let isUpdate
                let args = this.getPostAndPreArgs();
                if (pre) {
                    this._is_updating = true;
                    pre(this._sources, Object.assign({ eventsData, events }, args));
                    this._is_updating = false;
                }
                this._update();
                if (post) {
                    this._is_updating = true;
                    post(this._sources, Object.assign({ eventsData, events }, args));
                    this._is_updating = false;
                }
            }
            catch (err) {
                console.error(err);
                this._is_updating = false;
            }
        };
        this._update = () => {
            if (this._is_updating) {
                return; // todo
            }
            this._is_updating = true;
            try {
                Subscriber._functions_to_updates.forEach(func => func.call(this));
            }
            catch (err) {
                console.error("Failed to update the Subscriber", err);
            }
            this._is_updating = false;
        };
        let _sources, _registerProps = [], _specificRegisterProps = [];
        if (to instanceof Array) {
            _sources = [];
            for (const i in to) {
                const val = to[i];
                if (val && val.dispatcher instanceof Object) {
                    // Dispatcher
                    _sources.push(val.dispatcher);
                    if (val.onDispatch) {
                        _specificRegisterProps.push(val);
                    }
                    else {
                        _registerProps.push(val);
                    }
                }
                else if (val && val.dispatch && val.register) {
                    // Dispatcher
                    _sources.push(val);
                    _registerProps.push(val);
                }
                else {
                    throw new TypeError("You must ot send dispatcher in resources arg");
                }
            }
        }
        else if (to instanceof Object) {
            _sources = {};
            for (let key in to) {
                const val = to[key];
                if (val && val.dispatch && val.register) {
                    // Dispatcher
                    _sources[key] = val;
                    _registerProps.push(val);
                }
                else if (val && val.dispatcher instanceof Object) {
                    // Dispatcher
                    _sources[key] = val.dispatcher;
                    if (val.onDispatch) {
                        _specificRegisterProps.push(val);
                    }
                    else {
                        _registerProps.push(val);
                    }
                }
                else {
                    throw Error("You must ot send dispatcher in resources arg");
                }
            }
        }
        _1.Dispatcher.register(this._update, _registerProps);
        this._unregisterFunc.push(() => _1.Dispatcher.unregister(this._update, _registerProps));
        if (_specificRegisterProps.length > 0) {
            for (let o of _specificRegisterProps) {
                const func = this._preAndPostUpdate(o);
                o.dispatcher.register(func, o.on);
                this._unregisterFunc.push(() => o.dispatcher.unregisterFromAll(func));
            }
        }
        this._sources = _sources;
    }
    subscribe(dispatcher) {
    }
    getPostAndPreArgs() {
        return { context: this.context };
    }
    ;
    destroy() {
        this._unregisterFunc.forEach(func => func());
    }
}
exports.Subscriber = Subscriber;
Subscriber._functions_to_updates = [];
function Sreatesubscriber(args) {
    return new Subscriber(args);
}
exports.Sreatesubscriber = Sreatesubscriber;
//# sourceMappingURL=subscriber.js.map