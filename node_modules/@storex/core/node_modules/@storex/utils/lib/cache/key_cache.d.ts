import { Key } from "./types";
export declare type eventFunctions<T> = ((key: Key, value: T) => void) | (() => void);
export declare enum KeyCacheEvents {
    set = "set",
    get = "get",
    remove = "remove",
    clean = "clean"
}
declare function DEFAULT(): any;
export declare class KeyCache<T = any> {
    private __cache;
    private __limiter;
    private __default_value;
    private __on_funcs;
    constructor({ default_value }?: {
        default_value?: typeof DEFAULT;
    });
    get size(): number;
    clean(): void;
    get(key: Key): T;
    set(key: Key, value: T): void;
    remove(key: Key): void;
    private __emit;
    on(event: KeyCacheEvents, func: eventFunctions<T>): void;
    unlistenOn(event: KeyCacheEvents, func: eventFunctions<T>): void;
}
export {};
