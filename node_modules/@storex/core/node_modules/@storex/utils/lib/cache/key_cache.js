"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var KeyCacheEvents;
(function (KeyCacheEvents) {
    KeyCacheEvents["set"] = "set";
    KeyCacheEvents["get"] = "get";
    KeyCacheEvents["remove"] = "remove";
    KeyCacheEvents["clean"] = "clean";
})(KeyCacheEvents = exports.KeyCacheEvents || (exports.KeyCacheEvents = {}));
function DEFAULT() {
    return null;
}
class KeyCache {
    // todo implement limit function
    constructor({ default_value = DEFAULT } = {}) {
        this.__cache = new Map();
        this.__limiter = null;
        this.__default_value = null;
        // init the funcs by iterate and mapping the key cache events
        this.__on_funcs = new Map(Object.keys(KeyCacheEvents).map(event => [event, new Set()]));
        this.__default_value = default_value;
    }
    get size() {
        return this.__cache.size;
    }
    clean() {
        this.__cache.clear();
        this.__emit(KeyCacheEvents.clean);
    }
    get(key) {
        let value = this.__cache.get(key);
        // return default value
        if (value === undefined)
            return this.__default_value();
        this.__emit(KeyCacheEvents.get, key, value);
        return value;
    }
    set(key, value) {
        this.__cache.set(key, value);
        this.__emit(KeyCacheEvents.set, key, value);
    }
    remove(key) {
        let value = this.__cache.get(key);
        if (this.__cache.delete(key)) {
            this.__emit(KeyCacheEvents.remove, key, value);
        }
    }
    __emit(event, key, value) {
        for (const func of Array.from(this.__on_funcs.get(event))) {
            func(key, value);
        }
    }
    on(event, func) {
        var _a;
        if (typeof func == "function") {
            (_a = this.__on_funcs.get(event)) === null || _a === void 0 ? void 0 : _a.add(func);
        }
    }
    unlistenOn(event, func) {
        var _a;
        (_a = this.__on_funcs.get(event)) === null || _a === void 0 ? void 0 : _a.delete(func);
    }
}
exports.KeyCache = KeyCache;
//# sourceMappingURL=key_cache.js.map